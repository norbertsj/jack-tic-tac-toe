class Board {
    field Position p1;
    field Position p2;
    field Position p3;
    field Position p4;
    field Position p5;
    field Position p6;
    field Position p7;
    field Position p8;
    field Position p9;

    constructor Board new() {
        let p1 = Position.new(180, 50);
        let p2 = Position.new(230, 50);
        let p3 = Position.new(280, 50);
        let p4 = Position.new(180, 100);
        let p5 = Position.new(230, 100);
        let p6 = Position.new(280, 100);
        let p7 = Position.new(180, 150);
        let p8 = Position.new(230, 150);
        let p9 = Position.new(280, 150);

        return this;
    }

    method void dispose() {
        do p1.dispose();
        do p2.dispose();
        do p3.dispose();
        do p4.dispose();
        do p5.dispose();
        do p6.dispose();
        do p7.dispose();
        do p8.dispose();
        do p9.dispose();
        do Memory.deAlloc(this);

        return;
    }

    method Position getPosition(int input) {
        if (input = 1) { return p1; }
        if (input = 2) { return p2; }
        if (input = 3) { return p3; }
        if (input = 4) { return p4; }
        if (input = 5) { return p5; }
        if (input = 6) { return p6; }
        if (input = 7) { return p7; }
        if (input = 8) { return p8; }
        if (input = 9) { return p9; }

        return null;
    }

    method void fillPosition(int value, int input) {
        var Position position;
        let position = getPosition(input);
        do position.setValue(value);

        return;
    }

    method boolean isValidPosition(int input) {
        var Position position;
        let position = getPosition(input);

        if (position = null) {
            return false;
        }

        return ~(position.hasValue());
    }

    method void draw() {
        do Screen.clearScreen();
        do Screen.setColor(true);
        do Screen.drawLine(180, 100, 330, 100);
        do Screen.drawLine(180, 150, 330, 150);
        do Screen.drawLine(230, 50, 230, 200);
        do Screen.drawLine(280, 50, 280, 200);

        do p1.draw();
        do p2.draw();
        do p3.draw();
        do p4.draw();
        do p5.draw();
        do p6.draw();
        do p7.draw();
        do p8.draw();
        do p9.draw();

        return;
    }

    method Array getPositionValues() {
        var Array values;
        let values = Array.new(9);

        let values[0] = p1.getValue();
        let values[1] = p2.getValue();
        let values[2] = p3.getValue();
        let values[3] = p4.getValue();
        let values[4] = p5.getValue();
        let values[5] = p6.getValue();
        let values[6] = p7.getValue();
        let values[7] = p8.getValue();
        let values[8] = p9.getValue();

        return values;
    }

    method boolean isHorizontalMatch() {
        var Array v;
        let v = getPositionValues();

        if ((v[0] = 1) & (v[1] = 1) & (v[2] = 1)) {
            return true;
        }

        if ((v[0] = 2) & (v[1] = 2) & (v[2] = 2)) {
            return true;
        }

        if ((v[3] = 1) & (v[4] = 1) & (v[5] = 1)) {
            return true;
        }

        if ((v[3] = 2) & (v[4] = 2) & (v[5] = 2)) {
            return true;
        }

        if ((v[6] = 1) & (v[7] = 1) & (v[8] = 1)) {
            return true;
        }

        if ((v[6] = 2) & (v[7] = 2) & (v[8] = 2)) {
            return true;
        }

        return false;
    }

    method boolean isVerticalMatch() {
        var Array v;
        let v = getPositionValues();

        if ((v[0] = 1) & (v[3] = 1) & (v[6] = 1)) {
            return true;
        }

        if ((v[0] = 2) & (v[3] = 2) & (v[6] = 2)) {
            return true;
        }

        if ((v[1] = 1) & (v[4] = 1) & (v[7] = 1)) {
            return true;
        }

        if ((v[1] = 2) & (v[4] = 2) & (v[7] = 2)) {
            return true;
        }

        if ((v[2] = 1) & (v[5] = 1) & (v[8] = 1)) {
            return true;
        }

        if ((v[2] = 2) & (v[5] = 2) & (v[8] = 2)) {
            return true;
        }

        return false;
    }

    method boolean isDiagonalMatch() {
        var Array v;
        let v = getPositionValues();

        if ((v[0] = 1) & (v[4] = 1) & (v[8] = 1)) {
            return true;
        }

        if ((v[0] = 2) & (v[4] = 2) & (v[8] = 2)) {
            return true;
        }

        if ((v[2] = 1) & (v[4] = 1) & (v[6] = 1)) {
            return true;
        }

        if ((v[2] = 2) & (v[4] = 2) & (v[6] = 2)) {
            return true;
        }

        return false;
    }

    method boolean allPositionsFilled() {
        return (
            (p1.hasValue()) &
            (p2.hasValue()) &
            (p3.hasValue()) &
            (p4.hasValue()) &
            (p5.hasValue()) &
            (p6.hasValue()) &
            (p7.hasValue()) &
            (p8.hasValue()) &
            (p9.hasValue())
        );
    }

    method void clear() {
        do p1.setValue(0);
        do p2.setValue(0);
        do p3.setValue(0);
        do p4.setValue(0);
        do p5.setValue(0);
        do p6.setValue(0);
        do p7.setValue(0);
        do p8.setValue(0);
        do p9.setValue(0);

        return;
    }
}