class Board {
    field Position p1;
    field Position p2;
    field Position p3;
    field Position p4;
    field Position p5;
    field Position p6;
    field Position p7;
    field Position p8;
    field Position p9;
    field BoardState state;

    static int H1;
    static int H2;
    static int H3;
    static int V1;
    static int V2;
    static int V3;
    static int D1;
    static int D2;

    constructor Board new() {
        let p1 = Position.new(180, 50);
        let p2 = Position.new(230, 50);
        let p3 = Position.new(280, 50);
        let p4 = Position.new(180, 100);
        let p5 = Position.new(230, 100);
        let p6 = Position.new(280, 100);
        let p7 = Position.new(180, 150);
        let p8 = Position.new(230, 150);
        let p9 = Position.new(280, 150);
        let H1 = 1;
        let H2 = 2;
        let H3 = 3;
        let V1 = 4;
        let V2 = 5;
        let V3 = 6;
        let D1 = 7;
        let D2 = 8;
        let state = BoardState.new();

        return this;
    }

    method void dispose() {
        do p1.dispose();
        do p2.dispose();
        do p3.dispose();
        do p4.dispose();
        do p5.dispose();
        do p6.dispose();
        do p7.dispose();
        do p8.dispose();
        do p9.dispose();
        do state.dispose();
        do Memory.deAlloc(this);

        return;
    }

    method Position getPosition(int input) {
        if (input = 1) { return p1; }
        if (input = 2) { return p2; }
        if (input = 3) { return p3; }
        if (input = 4) { return p4; }
        if (input = 5) { return p5; }
        if (input = 6) { return p6; }
        if (input = 7) { return p7; }
        if (input = 8) { return p8; }
        if (input = 9) { return p9; }

        return null;
    }

    method void fillPosition(int value, int input) {
        var Position position;
        let position = getPosition(input);
        do position.setValue(value);
        do updateState();

        return;
    }

    method boolean isValidPosition(int input) {
        var Position position;
        let position = getPosition(input);

        if (position = null) {
            return false;
        }

        return ~(position.hasValue());
    }

    method Array getPositionValues() {
        var Array values;
        let values = Array.new(9);

        let values[0] = p1.getValue();
        let values[1] = p2.getValue();
        let values[2] = p3.getValue();
        let values[3] = p4.getValue();
        let values[4] = p5.getValue();
        let values[5] = p6.getValue();
        let values[6] = p7.getValue();
        let values[7] = p8.getValue();
        let values[8] = p9.getValue();

        return values;
    }

    method boolean allPositionsFilled() {
        return (
            (p1.hasValue()) &
            (p2.hasValue()) &
            (p3.hasValue()) &
            (p4.hasValue()) &
            (p5.hasValue()) &
            (p6.hasValue()) &
            (p7.hasValue()) &
            (p8.hasValue()) &
            (p9.hasValue())
        );
    }

    method void updateState() {
        var Array v;
        let v = getPositionValues();

        do checkHorizontal(v);
        do checkVertical(v);
        do checkDiagonal(v);

        return;
    }

    method void resetState() {
        do state.init();

        return;
    }

    method void checkHorizontal(Array v) {
        if ((v[0] = 1) & (v[1] = 1) & (v[2] = 1)) { do state.update(true, H1); }
        if ((v[0] = 2) & (v[1] = 2) & (v[2] = 2)) { do state.update(true, H1); }
        if ((v[3] = 1) & (v[4] = 1) & (v[5] = 1)) { do state.update(true, H2); }
        if ((v[3] = 2) & (v[4] = 2) & (v[5] = 2)) { do state.update(true, H2); }
        if ((v[6] = 1) & (v[7] = 1) & (v[8] = 1)) { do state.update(true, H3); }
        if ((v[6] = 2) & (v[7] = 2) & (v[8] = 2)) { do state.update(true, H3); }

        return;
    }

    method void checkVertical(Array v) {
        if ((v[0] = 1) & (v[3] = 1) & (v[6] = 1)) { do state.update(true, V1); }
        if ((v[0] = 2) & (v[3] = 2) & (v[6] = 2)) { do state.update(true, V1); }
        if ((v[1] = 1) & (v[4] = 1) & (v[7] = 1)) { do state.update(true, V2); }
        if ((v[1] = 2) & (v[4] = 2) & (v[7] = 2)) { do state.update(true, V2); }
        if ((v[2] = 1) & (v[5] = 1) & (v[8] = 1)) { do state.update(true, V3); }
        if ((v[2] = 2) & (v[5] = 2) & (v[8] = 2)) { do state.update(true, V3); }

        return;
    }

    method void checkDiagonal(Array v) {
        if ((v[0] = 1) & (v[4] = 1) & (v[8] = 1)) { do state.update(true, D1); }
        if ((v[0] = 2) & (v[4] = 2) & (v[8] = 2)) { do state.update(true, D1); }
        if ((v[2] = 1) & (v[4] = 1) & (v[6] = 1)) { do state.update(true, D2); }
        if ((v[2] = 2) & (v[4] = 2) & (v[6] = 2)) { do state.update(true, D2); }

        return;
    }

    method boolean isMatch() {
        return state.getMatch();
    }

    method void draw() {
        do Screen.clearScreen();
        do Screen.setColor(true);
        do Screen.drawLine(180, 100, 330, 100);
        do Screen.drawLine(180, 150, 330, 150);
        do Screen.drawLine(230, 50, 230, 200);
        do Screen.drawLine(280, 50, 280, 200);

        do p1.draw();
        do p2.draw();
        do p3.draw();
        do p4.draw();
        do p5.draw();
        do p6.draw();
        do p7.draw();
        do p8.draw();
        do p9.draw();

        if (isMatch()) {
            do drawMatchLine(state.getLine());
        }

        return;
    }

    method void drawMatchLine(int line) {
        if (line = H1) {
            do Screen.drawLine(180, 74, 330, 74);
            do Screen.drawLine(180, 75, 330, 75);
            do Screen.drawLine(180, 76, 330, 76);
        }

        if (line = H2) {
            do Screen.drawLine(180, 124, 330, 124);
            do Screen.drawLine(180, 125, 330, 125);
            do Screen.drawLine(180, 126, 330, 126);
        }

        if (line = H3) {
            do Screen.drawLine(180, 174, 330, 174);
            do Screen.drawLine(180, 175, 330, 175);
            do Screen.drawLine(180, 176, 330, 176);
        }
        
        if (line = V1) {
            do Screen.drawLine(204, 50, 204, 200);
            do Screen.drawLine(205, 50, 205, 200);
            do Screen.drawLine(206, 50, 206, 200);
        }

        if (line = V2) {
            do Screen.drawLine(254, 50, 254, 200);
            do Screen.drawLine(255, 50, 255, 200);
            do Screen.drawLine(256, 50, 256, 200);
        }

        if (line = V3) {
            do Screen.drawLine(304, 50, 304, 200);
            do Screen.drawLine(305, 50, 305, 200);
            do Screen.drawLine(306, 50, 306, 200);
        }

        if (line = D1) {
            do Screen.drawLine(180, 49, 330, 199);
            do Screen.drawLine(180, 50, 330, 200);
            do Screen.drawLine(180, 51, 330, 201);
        }

        if (line = D2) {
            do Screen.drawLine(180, 199, 330, 49);
            do Screen.drawLine(180, 200, 330, 50);
            do Screen.drawLine(180, 201, 330, 51);
        }

        return;
    }

    method void clear() {
        do p1.setValue(0);
        do p2.setValue(0);
        do p3.setValue(0);
        do p4.setValue(0);
        do p5.setValue(0);
        do p6.setValue(0);
        do p7.setValue(0);
        do p8.setValue(0);
        do p9.setValue(0);
        do resetState();

        return;
    }
}